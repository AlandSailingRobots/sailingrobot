#monitor
port 4321

#
# First there's a block of variable declarations. There
# should be one of these for each key which appears in the
# data stream, except for "time".

# These are separated by commas.

var {
    # Currently only float values are supported - we can emulate
    # others with these.
    
    # "heading" is a variable with range 0 to 359. We'll store 100 values
    # for it in a cyclic buffer, so we can graph 100 values back.

    float heading 100 range 0 to 359

    # True Wind direction
    float twd 100 range 0 to 359

    # Course to the waypoint
    float ctw 100 range 0 to 359

    # Distance to the waypoint in metres
    float dtw 100 range 0 to 200

    float wpnum 1000 range 0 to 200

    float speed 1000 range 0 to 5

    float warn 100 range 0 to 3

    float offline 1 range 0 to 1

    float display 1 range 0 to 1

    float rudderAV 1 range 3500 to 8000

    float sailAV 1 range 3500 to 8000
    
    # "lat" and "lon" should always be considered to be a pair,
    # so we link them - if a lat ever arrives without a lon, a
    # lon will be created at the same time with the same value
    # it had previously.
    # Lat has range -90 to 90, lon has range -180 to 180
    # Being linked, they have the same buffer size - 1000 values.
    
    linked (
    float lat range -90 to 90,
    float lon range -180 to 180) 1000

    linked (
    float wpLat range -90 to 90,
    float wpLon range -180 to 180) 100

    linked (
    float obLat range -90 to 90,
    float obLon range -180 to 180) 100
}
    
# That's the variables, now we can define the widgets.

# the only display (currently)
window {
    
    # top left
    frame 0,0,20,1 {
        map 0,0 size 400, 400{
            centre 60.10,19.92 height 10

            point {
                # For this point renderer,
                # we render points at lat,lon, with a new point
                # every time we get a new lat. Note that lat comes first.
                
                location var lat,var lon on var lat
            
                # we also render 40 of the previous points when new "lat" data arrived.
            
                trail 40
            }

            point {
                # For this point renderer,
                # we render points at lat,lon, with a new point
                # every time we get a new lat. Note that lat comes first.
                
                location var wpLat,var wpLon on var wpLat
            
                # we also render 40 of the previous points when new "lat" data arrived.
            
                trail 40
                colour green
            
                hue var speed
            }

            point {
                # For this point renderer,
                # we render points at lat,lon, with a new point
                # every time we get a new lat. Note that lat comes first.
                
                location var obLat,var obLon on var obLat
            
                # we also render 40 of the previous points when new "lat" data arrived.
            
                trail 40
                colour red
            
                hue var speed
            }

            vector {
                # we also draw a vector at each point - the same points.            
                location var lat, var lon on var lat
            
                trail 1
            
                # the width of the vector is set to 3 pixels
                width 3
            
                # the direction of the vector comes from the expression a*180.
                degrees var heading
            
                # and the vector is black (default is white, for technical reasons)
                colour black
            }
            
            # waypoint renderer
            waypoint {}
        }
    }

    frame 20,0,20,1 { # top right

        compass 0,1 {
            title "Course"
            expr "ctw" range auto
        } 

        compass 1,1 {
            title "Heading"
            expr "heading" range auto
        }

        gauge 0,2 { 
            var speed 
            title "Speed" 
            subtitle "Metres Per Second" 
            fontscale 2 
        }

        compass 1,2 {
            title "True Wind"
            expr "twd" range auto
        }

        number 0,3 { var wpnum title "Waypoint Number"}
        number 1,3 { var dtw title "Waypoint Distance"}

        gauge 0,4 { 
            var rudderAV 
            title "Rudder" 
            subtitle "PWM" 
            fontscale 2 
        }

        gauge 1,4 { 
            var sailAV 
            title "Sail" 
            subtitle "PWM" 
            fontscale 2 
        }

        status 0,0,  2,1 {
            size 2,1 

            # bool requires a boolean expression source,
            # which is actually a float in the range -1 to 1 (although
            # you can specify "range auto".) 

            bool {
                pos 0,0
                title "Monitor Tool"
                expr "display=0" range auto
                false green
                true red
            } 
        
            bool {
                pos 1,0
                title "Connected"
                expr "offline=1" range auto
                false green
                true red
            }
        }
    } 
    

    # bottom frame, 2 cols wide

    frame 0,1,40,80 {
        graph 0,0 {
            time 100
            var speed { col red width 2}
            var dtw { col blue width 2}
        }
    }
}
